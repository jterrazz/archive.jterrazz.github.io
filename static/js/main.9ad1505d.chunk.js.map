{"version":3,"sources":["components/organisms/TheNavBar.js","components/pages/Home.js","serviceWorker.js","index.js","App.js"],"names":["TheNavBar","props","Navbar","bg","to","Brand","className","Nav","class","type","Home","style","paddingBottom","Container","Button","variant","Boolean","window","location","hostname","match","ReactDOM","render","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAgCeA,G,MA1BG,SAAAC,GAChB,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,eACT,kBAAC,IAAD,CAAMC,GAAG,UACP,kBAACF,EAAA,EAAOG,MAAR,CAAcC,UAAU,0BAAxB,aAGF,kBAACC,EAAA,EAAD,CAAKC,MAAM,qCACT,yBAAKF,UAAU,mBACf,yBAAKA,UAAU,yBAAf,uBAGF,yBAAKA,UAAU,yBACb,0BAAMA,UAAU,QAAhB,MACA,qCAGF,4BAAQA,UAAU,yCAAyCG,KAAK,UAC9D,0BAAMH,UAAU,iBACd,0BAAMA,UAAU,yB,gBCkBXI,EAvCF,SAAAT,GACX,OACE,6BACI,yBAAKU,MAAO,CAACC,cAAe,OAAQN,UAAU,qBAC5C,yBAAKA,UAAU,iCACb,kBAACO,EAAA,EAAD,CAAWP,UAAU,wFACnB,yBAAKA,UAAU,mDAAf,SAGA,wBAAIA,UAAU,QAAd,YACW,mEADX,2EAGA,kBAACQ,EAAA,EAAD,CAAQC,QAAQ,OAAOT,UAAU,oCAAjC,cAKR,yBAAKA,UAAU,0BACb,kBAACO,EAAA,EAAD,KACE,4CAIJ,kBAACA,EAAA,EAAD,KACE,iSAOE,6DCvBUG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCGD,WACb,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,KACV,kBAAC,EAAD,YDVI,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9ad1505d.chunk.js","sourcesContent":["import {Link} from \"react-router-dom\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport React from \"react\";\nimport \"./TheNavBar.scss\"\n\nconst TheNavBar = props => {\n  return (\n    <Navbar bg=\"transparent\">\n      <Link to=\"/users\">\n        <Navbar.Brand className=\"navbar-brand text-dark\">jterrazz</Navbar.Brand>\n      </Link>\n\n      <Nav class=\"mx-auto d-flex align-items-center\">\n        <div className=\"green-dot mr-2\"/>\n        <div className=\"small font-weight-500\">Available for work</div>\n      </Nav>\n\n      <div className=\"small font-weight-600\">\n        <span className=\"mr-1\">EN</span>\n        <span>FR</span>\n      </div>\n\n      <button className=\"hamburger hamburger--collapse p-0 ml-3\" type=\"button\">\n        <span className=\"hamburger-box\">\n          <span className=\"hamburger-inner\"/>\n        </span>\n      </button>\n    </Navbar>\n  )\n}\n\nexport default TheNavBar\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\n\nconst Home = props => {\n  return (\n    <div>\n        <div style={{paddingBottom: '45%'}} className=\"position-relative\">\n          <div className=\"position-absolute w-100 h-100\">\n            <Container className=\"w-100 h-100 d-flex flex-column align-items-center justify-content-center text-center\">\n              <div className=\"small text-uppercase font-weight-500 text-muted\">\n                Hello\n              </div>\n              <h1 className=\"mb-4\">\n                I create <b>clean, robust, scalable and powerful</b> applications for the new world, same quality from backend to frontend.\n              </h1>\n              <Button variant=\"dark\" className=\"rounded-max font-weight-500 px-3\">My work</Button>\n            </Container>\n          </div>\n        </div>\n\n      <div className=\"bg-dark p-5 text-white\">\n        <Container>\n          <h2>My stories</h2>\n        </Container>\n      </div>\n\n      <Container>\n        <div>\n          ðŸ‘‹\n          Hey there *waves*, my name is Jean-Baptiste, developer, XXX and XXX.\n          I love connecting brands and companies with their customers through performant code, design cared interfaces.\n          I can help you with ...\n          But enough about me, how can I help you ?\n\n          <span>jterrazz@protonmail.com</span>\n        </div>\n      </Container>\n\n    </div>\n  )\n}\n\nexport default Home\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport TheNavBar from \"./components/organisms/TheNavBar\";\nimport Home from \"./components/pages/Home\";\n\nexport default function App() {\n  return (\n    <Router>\n      <TheNavBar/>\n      <div>\n        <Switch>\n          <Route path=\"/\">\n            <Home/>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n"],"sourceRoot":""}